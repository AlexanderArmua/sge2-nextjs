model Reserva {
    id Int @id @default(autoincrement())

    estatus         ReservaEstatus
    fechaHoraInicio DateTime
    fechaHoraFin    DateTime
    tipo            ReservaTipo

    // Usuario que hace la reserva
    usuarioSolicitoId String
    usuarioSolicito   User   @relation(fields: [usuarioSolicitoId], references: [id], name: "reservasSolicitadas", onDelete: Restrict)

    // Usuario que aprueba la reserva
    usuarioAprobadorId String?
    usuarioAprobador   User?   @relation(fields: [usuarioAprobadorId], references: [id], name: "reservasAprobadas", onDelete: Restrict)

    // Usuario que rechaza la reserva
    usuarioRechazadoId String?
    usuarioRechazado   User?   @relation(fields: [usuarioRechazadoId], references: [id], name: "reservasRechazadas", onDelete: Restrict)

    // Usuario que solicita renovar la reserva
    usuarioRenovoId String?
    usuarioRenovo   User?   @relation(fields: [usuarioRenovoId], references: [id], name: "reservasRenovadas", onDelete: Restrict)

    // Usuario que marca la reserva como terminada
    usuarioRecibioId String?
    usuarioRecibio   User?   @relation(fields: [usuarioRecibioId], references: [id], name: "reservasRecibidas", onDelete: Restrict)

    // Tutor de la reserva (solo aplicable a reserva de laboratorio abierto)
    usuarioTutorId String?
    usuarioTutor   User?   @relation(fields: [usuarioTutorId], references: [id], name: "reservaTutor", onDelete: Restrict)

    reservaEquipo             ReservaEquipo?
    reservaLibro              ReservaLibro?
    reservaLaboratorioCerrado ReservaLaboratorioCerrado?
    reservaLaboratorioAbierto ReservaLaboratorioAbierto?

    fechaRenovacion DateTime?
    fechaAprobacion DateTime?
    fechaRechazo    DateTime?
    fechaRecibido   DateTime?

    // Auditorias
    usuarioCreadorId     String
    usuarioModificadorId String
    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @updatedAt

    @@index([estatus])
    @@index([fechaHoraInicio(sort: Asc)])
    @@index([fechaHoraFin(sort: Asc)])
    @@index([tipo])
}

model ReservaEquipo {
    id Int @id @default(autoincrement())

    fechaEntregado DateTime

    reservaId Int     @unique
    reserva   Reserva @relation(fields: [reservaId], references: [id], onDelete: Cascade)

    equipoId Int
    equipo   Equipo @relation(fields: [equipoId], references: [id], onDelete: Cascade)

    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @default(now()) @updatedAt
    usuarioCreadorId     String
    usuarioModificadorId String

    @@index([fechaEntregado(sort: Asc)])
}

model ReservaLibro {
    id Int @id @default(autoincrement())

    fechaEntregado DateTime

    reservaId Int     @unique
    reserva   Reserva @relation(fields: [reservaId], references: [id], onDelete: Cascade)

    libroId Int
    libro   Libro @relation(fields: [libroId], references: [id], onDelete: Cascade)

    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @default(now()) @updatedAt
    usuarioCreadorId     String
    usuarioModificadorId String

    @@index([fechaEntregado(sort: Asc)])
}

model ReservaLaboratorioCerrado {
    id Int @id @default(autoincrement())

    reservaId Int     @unique
    reserva   Reserva @relation(fields: [reservaId], references: [id], onDelete: Cascade)

    laboratorioId Int?
    laboratorio   Laboratorio? @relation(fields: [laboratorioId], references: [id], onDelete: Cascade)

    cursoId Int
    curso   Curso @relation(fields: [cursoId], references: [id], onDelete: Cascade)

    equipoReservado ReservaLaboratorioCerradoEquipo[]

    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @default(now()) @updatedAt
    usuarioCreadorId     String
    usuarioModificadorId String
}

model ReservaLaboratorioCerradoEquipo {
    id Int @id @default(autoincrement())

    cantidad Int

    reservaLaboratorioCerradoId Int
    reservaLaboratorioCerrado   ReservaLaboratorioCerrado @relation(fields: [reservaLaboratorioCerradoId], references: [id])

    equipoId Int
    equipo   Equipo @relation(fields: [equipoId], references: [id], onDelete: Cascade)

    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @default(now()) @updatedAt
    usuarioCreadorId     String
    usuarioModificadorId String
}

model ReservaLaboratorioAbierto {
    id Int @id @default(autoincrement())

    especialidad String
    descripcion  String

    reservaId Int     @unique
    reserva   Reserva @relation(fields: [reservaId], references: [id], onDelete: Cascade)

    laboratorioId Int?
    laboratorio   Laboratorio? @relation(fields: [laboratorioId], references: [id], onDelete: Cascade)

    equipoReservado ReservaLaboratorioAbiertoEquipo[]

    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @default(now()) @updatedAt
    usuarioCreadorId     String
    usuarioModificadorId String

    @@index([especialidad(sort: Asc)])
}

model ReservaLaboratorioAbiertoEquipo {
    id Int @id @default(autoincrement())

    cantidad Int

    reservaLaboratorioAbiertoId Int
    reservaLaboratorioAbierto   ReservaLaboratorioAbierto @relation(fields: [reservaLaboratorioAbiertoId], references: [id], onDelete: Cascade)

    equipoId Int
    equipo   Equipo @relation(fields: [equipoId], references: [id], onDelete: Cascade)

    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @default(now()) @updatedAt
    usuarioCreadorId     String
    usuarioModificadorId String
}

enum ReservaEstatus {
    PENDIENTE
    FINALIZADA
    CANCELADA
}

enum ReservaTipo {
    LABORATORIO_ABIERTO
    LABORATORIO_CERRADO
    INVENTARIO
    LIBRO
}
